const { openaiClient, DEFAULT_MODEL_CONFIG, SYSTEM_PROMPT, OPENAI_API_URL } = require('../config/openaiConfig');
const { validateCPF } = require('./patientService');

/**
 * Processa mensagens do usu√°rio com o GPT-4O
 * @param {Array} conversationHistory - Hist√≥rico de mensagens da conversa
 * @param {Object} patientInfo - Informa√ß√µes do paciente (opcional)
 * @returns {Promise<string>} - Resposta gerada pelo GPT-4O
 */
const processMessageWithGPT = async (conversationHistory, patientInfo = null) => {
  try {
    console.log('[OpenAI] Iniciando processamento de mensagem');
    
    // Formatar as mensagens para o formato esperado pela API da OpenAI
    let systemPrompt = SYSTEM_PROMPT;
    
    // Adicionar informa√ß√µes do paciente ao prompt do sistema, se dispon√≠veis
    if (patientInfo) {
      const patientContext = `
INFORMA√á√ïES DO PACIENTE:
- Nome: ${patientInfo.name || 'N√£o cadastrado'}
- CPF: ${patientInfo.cpf || 'N√£o cadastrado'}
- Telefone: ${patientInfo.phone_number || 'N√£o cadastrado'}
${patientInfo.last_appointment ? `- √öltima consulta: ${new Date(patientInfo.last_appointment).toLocaleDateString('pt-BR')}` : '- Sem consultas anteriores'}
${patientInfo.total_appointments ? `- Total de consultas: ${patientInfo.total_appointments}` : ''}

Use estas informa√ß√µes para personalizar o atendimento, mas n√£o mencione ter acesso a esse hist√≥rico a menos que o paciente pergunte especificamente. Sempre trate o paciente pelo nome quando dispon√≠vel.`;

      systemPrompt = `${SYSTEM_PROMPT}\n\n${patientContext}`;
      console.log('[OpenAI] Adicionadas informa√ß√µes do paciente ao prompt do sistema');
    }
    
    const messages = [
      // Primeiro, adicionar o prompt do sistema
      { role: 'system', content: systemPrompt }
    ];

    // Adicionar hist√≥rico de mensagens (limitando a √∫ltimas 12 para contexto mais amplo)
    const recentHistory = conversationHistory.slice(-12);
    recentHistory.forEach(msg => {
      // Garantir que o role seja um dos valores aceitos pela API: 'system', 'user' ou 'assistant'
      let role = msg.role;
      if (role !== 'system' && role !== 'user' && role !== 'assistant') {
        role = 'user'; // Fallback seguro
      }
      
      messages.push({
        role: role,
        content: msg.content
      });
    });

    console.log(`[OpenAI] Preparadas ${messages.length} mensagens para envio ao GPT-4o`);
    
    // Configura√ß√£o para a requisi√ß√£o 
    const requestConfig = {
      model: "gpt-4o", // For√ßar explicitamente o modelo
      temperature: 0.5,
      top_p: 0.8,
      n: 1,
      messages
    };

    // Fazer a requisi√ß√£o para a API da OpenAI
    console.log('[OpenAI] Enviando requisi√ß√£o para GPT-4o...');
    const response = await openaiClient.post('/chat/completions', requestConfig);
    console.log('[OpenAI] Resposta recebida do GPT-4o');

    // Extrair o texto da resposta
    const assistantResponse = response.data.choices[0].message.content;
    console.log(`[OpenAI] Conte√∫do da resposta: "${assistantResponse.substring(0, 50)}..."`);
    
    // Verificar se a resposta √© muito curta ou gen√©rica
    if (assistantResponse.length < 20) {
      console.log('[OpenAI] ALERTA: Resposta muito curta detectada, adicionando contexto');
      return assistantResponse + "\n\nPosso ajudar com algo mais sobre seu agendamento com o Dr. Reinaldo Ragazzo?";
    }
    
    // Detectar respostas gen√©ricas comuns e adicionar personaliza√ß√£o
    const genericResponses = [
      "Ol√°! Como posso ajudar voc√™ hoje?",
      "Como posso ajudar voc√™ hoje?",
      "Em que posso ajudar voc√™ hoje?",
      "Ol√°! Seja bem-vindo",
      "Seja bem-vindo",
      "Posso ajudar"
    ];
    
    // Verificar se √© primeiro contato para personalizar boas-vindas
    const isFirstContact = conversationHistory.length <= 2;
    
    // Se a resposta for gen√©rica, adicione contexto espec√≠fico
    if (genericResponses.some(generic => assistantResponse.includes(generic))) {
      console.log('[OpenAI] ALERTA: Resposta gen√©rica detectada, personalizando');
      
      if (isFirstContact) {
        // Primeira mensagem - boas-vindas completas
        if (patientInfo && patientInfo.name) {
          return `Ol√° ${patientInfo.name}! Sou Ana, secret√°ria do consult√≥rio do Dr. Reinaldo Ragazzo. Que bom falar com voc√™ novamente! Posso ajudar com agendamento, confirma√ß√£o, remarca√ß√£o ou cancelamento de consultas. Em que posso ajudar hoje? üòä`;
        } else {
          return "Ol√°! Sou Ana, secret√°ria do consult√≥rio do Dr. Reinaldo Ragazzo. Posso ajudar voc√™ a agendar, confirmar, remarcar ou cancelar uma consulta. Em que posso ajudar hoje? üòä";
        }
      } else {
        // Mensagem no meio da conversa - mais direto
        if (patientInfo && patientInfo.name) {
          return `${patientInfo.name}, como posso ajudar? Precisa agendar, remarcar ou cancelar uma consulta com o Dr. Reinaldo?`;
        } else {
          return "Como posso ajudar? Precisa agendar, remarcar ou cancelar uma consulta com o Dr. Reinaldo?";
        }
      }
    }
    
    // Verificar se a resposta cont√©m informa√ß√µes erradas sobre o processo
    const incorrectPatterns = [
      { pattern: "ligue para", replacement: "informe seus dados por aqui mesmo" },
      { pattern: "nosso telefone", replacement: "todos os detalhes por aqui mesmo" },
      { pattern: "enviar um e-mail", replacement: "informar por aqui mesmo" }
    ];
    
    let correctedResponse = assistantResponse;
    for (const { pattern, replacement } of incorrectPatterns) {
      if (correctedResponse.toLowerCase().includes(pattern)) {
        console.log(`[OpenAI] ALERTA: Resposta cont√©m informa√ß√£o incorreta: "${pattern}"`);
        correctedResponse = correctedResponse.replace(
          new RegExp(`([^.!?]*${pattern}[^.!?]*[.!?])`, 'i'), 
          `Voc√™ pode ${replacement}. `
        );
      }
    }
    
    if (correctedResponse !== assistantResponse) {
      console.log('[OpenAI] Resposta corrigida para procedimento correto');
    }
    
    return correctedResponse;
  } catch (error) {
    console.error('[OpenAI] Erro ao processar mensagem com GPT-4.5:', error.response?.data || error.message);
    console.error('[OpenAI] Detalhes completos do erro:', error);
    
    // Retornar uma mensagem de erro mais amig√°vel em caso de falha
    return 'Ol√°! Sou Ana, a secret√°ria do Dr. Reinaldo. Estou com dificuldades t√©cnicas no momento para processar sua solicita√ß√£o. Por favor, tente novamente em alguns instantes ou, se preferir, entre em contato pelo telefone (11) 1234-5678. Pe√ßo desculpas pelo inconveniente!';
  }
};

/**
 * Analisa a inten√ß√£o do usu√°rio a partir do hist√≥rico de conversa√ß√£o
 * @param {Array} conversationHistory - Hist√≥rico de mensagens
 * @returns {Promise<Object|null>} - Objeto contendo inten√ß√£o e entidades extra√≠das
 */
const analyzeIntent = async (conversationHistory) => {
  try {
    console.log('[OpenAI] Analisando inten√ß√£o do usu√°rio');
    
    // Extrair as √∫ltimas mensagens para an√°lise
    const recentMessages = conversationHistory.slice(-5);
    
    // Juntar todas as mensagens para an√°lise de contexto
    const fullText = recentMessages
      .map(msg => `${msg.role === 'user' ? 'Usu√°rio' : 'Assistente'}: ${msg.content}`)
      .join('\n');
    
    console.log(`[OpenAI] Analisando texto: "${fullText.substring(0, 100)}..."`);
    
    const messages = [
      {
        role: 'system',
        content: `Voc√™ √© um analisador de inten√ß√µes para um sistema de agendamento m√©dico.
          Identifique a inten√ß√£o principal da conversa do usu√°rio, classificando como uma das seguintes:
          - agendar: quando o usu√°rio deseja marcar uma nova consulta
          - cancelar: quando o usu√°rio deseja cancelar uma consulta existente
          - remarcar: quando o usu√°rio deseja alterar a data/hora de uma consulta existente
          - informacao: quando o usu√°rio est√° apenas solicitando informa√ß√µes
          
          Al√©m disso, extraia quaisquer entidades relevantes mencionadas:
          - cpf: o n√∫mero de CPF mencionado (extraia s√≥ os d√≠gitos)
          - data: a data mencionada para consulta (formato YYYY-MM-DD)
          - hora: o hor√°rio mencionado (formato HH:MM)
          - nome: o nome completo do paciente
          - telefone: n√∫mero de telefone mencionado
          
          IMPORTANTE: Sua resposta deve ser APENAS um objeto JSON sem nenhuma formata√ß√£o extra.
          Exemplo de resposta correta:
          {"type": "agendar", "confidence": 0.9, "entities": {"nome": "Maria Silva", "data": "2025-03-15", "hora": "14:30"}}`
      },
      {
        role: 'user',
        content: fullText
      }
    ];

    console.log('[OpenAI] Enviando requisi√ß√£o para an√°lise de inten√ß√£o...');
    const response = await openaiClient.post('/chat/completions', {
      model: "gpt-4o", // For√ßar explicitamente o modelo
      temperature: 0.1, // Reduzindo mais a temperatura para obter respostas mais determin√≠sticas
      top_p: 0.5,      // Reduzindo top_p para respostas mais focadas no formato solicitado
      response_format: { type: "json_object" }, // For√ßar resposta no formato JSON
      n: 1,
      messages
    });
    console.log('[OpenAI] Resposta de an√°lise recebida');

    // Extrair resposta e converter para objeto JSON
    let content = response.data.choices[0].message.content;
    console.log(`[OpenAI] Conte√∫do da an√°lise: ${content.substring(0, 100)}...`);
    
    try {
      // Limpeza de poss√≠veis formata√ß√µes markdown ou textos extras
      if (content.includes('```json')) {
        content = content.split('```json')[1].split('```')[0].trim();
      } else if (content.includes('```')) {
        content = content.split('```')[1].split('```')[0].trim();
      }
      
      // Eliminar poss√≠veis linhas iniciais n√£o-JSON
      if (content.trim().charAt(0) !== '{') {
        const jsonStart = content.indexOf('{');
        if (jsonStart !== -1) {
          content = content.substring(jsonStart);
        }
      }
      
      // Eliminar poss√≠veis linhas finais n√£o-JSON
      if (content.trim().charAt(content.trim().length - 1) !== '}') {
        const jsonEnd = content.lastIndexOf('}');
        if (jsonEnd !== -1) {
          content = content.substring(0, jsonEnd + 1);
        }
      }
      
      const result = JSON.parse(content);
      console.log(`[OpenAI] Inten√ß√£o detectada: ${result.type} (confian√ßa: ${result.confidence})`);
      
      // Validar CPF se estiver presente
      if (result.entities && result.entities.cpf) {
        result.cpfVerified = validateCPF(result.entities.cpf);
        console.log(`[OpenAI] CPF detectado: ${result.entities.cpf} (v√°lido: ${result.cpfVerified})`);
      }
      
      return result;
    } catch (parseError) {
      console.error('[OpenAI] Erro ao analisar resposta JSON:', parseError);
      console.log('[OpenAI] Resposta n√£o-JSON recebida:', content);
      
      // Fallback: Usar regex para detectar inten√ß√£o
      console.log('[OpenAI] Usando fallback de regex para detec√ß√£o de inten√ß√£o');
      return fallbackIntentDetection(fullText);
    }
  } catch (error) {
    console.error('[OpenAI] Erro ao analisar inten√ß√£o com GPT-4o:', error.response?.data || error.message);
    
    // Em caso de erro na API, usar o fallback de regex
    console.log('[OpenAI] Usando fallback de regex devido a erro na API');
    return fallbackIntentDetection(conversationHistory);
  }
};

/**
 * M√©todo de fallback para detectar inten√ß√£o usando regex quando GPT falha
 * @param {string|Array} input - Texto ou hist√≥rico de conversa
 * @returns {Object} - Objeto contendo inten√ß√£o e entidades detectadas
 */
const fallbackIntentDetection = (input) => {
  try {
    let fullText = '';
    
    // Se input for array (hist√≥rico de conversa), extrair texto
    if (Array.isArray(input)) {
      const recentMessages = input.slice(-5);
      fullText = recentMessages
        .map(msg => msg.content)
        .join('\n');
    } else {
      fullText = input;
    }
    
    // Palavras-chave para cada tipo de inten√ß√£o
    const keywords = {
      agendar: ['agendar', 'marcar', 'consulta', 'disponibilidade', 'hor√°rio', 'vaga'],
      cancelar: ['cancelar', 'desmarcar', 'remover', 'anular'],
      remarcar: ['remarcar', 'reagendar', 'mudar', 'alterar', 'trocar']
    };
    
    // Verificar se h√° men√ß√£o de CPF
    let cpf = null;
    const cpfPattern = /\b(\d{3}[\.\s]?\d{3}[\.\s]?\d{3}[-\.\s]?\d{2})\b/;
    const cpfMatch = fullText.match(cpfPattern);
    if (cpfMatch) {
      cpf = cpfMatch[1].replace(/[^\d]/g, '');
    }
    
    // Verificar inten√ß√£o com base em palavras-chave
    let detectedIntent = 'informacao'; // Padr√£o
    let highestScore = 0;
    
    for (const [intent, intentKeywords] of Object.entries(keywords)) {
      let score = 0;
      
      intentKeywords.forEach(keyword => {
        const regex = new RegExp(`\\b${keyword}\\b`, 'gi');
        const matches = fullText.match(regex) || [];
        score += matches.length;
      });
      
      if (score > highestScore) {
        highestScore = score;
        detectedIntent = intent;
      }
    }
    
    // Extrair outras entidades usando regex
    const entities = {};
    
    // Adicionar CPF se encontrado
    if (cpf) {
      entities.cpf = cpf;
    }
    
    // Tentar extrair data (DD/MM/YYYY ou DD-MM-YYYY)
    const datePattern = /(\d{1,2})[-\/\s](\d{1,2})(?:[-\/\s](\d{2,4}))?/;
    const dateMatch = fullText.match(datePattern);
    if (dateMatch) {
      const day = dateMatch[1].padStart(2, '0');
      const month = dateMatch[2].padStart(2, '0');
      const year = dateMatch[3] ? (dateMatch[3].length === 2 ? `20${dateMatch[3]}` : dateMatch[3]) : new Date().getFullYear();
      entities.data = `${year}-${month}-${day}`;
    }
    
    // Tentar extrair hor√°rio (HH:MM ou HH h)
    const timePattern = /(\d{1,2})(?::(\d{2}))?(?:\s*(?:h|horas))?/;
    const timeMatch = fullText.match(timePattern);
    if (timeMatch) {
      const hour = timeMatch[1].padStart(2, '0');
      const minute = timeMatch[2] ? timeMatch[2] : '00';
      entities.hora = `${hour}:${minute}`;
    }
    
    return {
      type: detectedIntent,
      confidence: highestScore > 0 ? 0.6 : 0.3,
      entities,
      cpfVerified: cpf ? validateCPF(cpf) : false
    };
  } catch (error) {
    console.error('Erro no fallback de detec√ß√£o de inten√ß√£o:', error);
    return { 
      type: 'desconhecido', 
      confidence: 0.1, 
      entities: {} 
    };
  }
};

/**
 * Processa mensagem para incorporar confirma√ß√£o de a√ß√£o se necess√°rio
 * @param {string} gptResponse - Resposta original do GPT
 * @param {Object} actionResult - Resultado da a√ß√£o de agendamento 
 * @returns {string} - Resposta final combinada
 */
const incorporateActionConfirmation = (gptResponse, actionResult) => {
  if (!actionResult) return gptResponse;
  
  console.log(`[OpenAI Service] Incorporando confirma√ß√£o de a√ß√£o:`, JSON.stringify(actionResult, null, 2));
  
  // Criar um footer com a confirma√ß√£o da a√ß√£o
  let actionConfirmation = '';
  
  switch (actionResult.action) {
    case 'agendar':
      actionConfirmation = `\n\n‚úÖ Consulta agendada com sucesso para ${actionResult.date} √†s ${actionResult.time}.`;
      if (actionResult.eventId) {
        actionConfirmation += `\nID do agendamento: ${actionResult.eventId}`;
      }
      break;
    case 'cancelar':
      actionConfirmation = '\n\n‚úÖ Sua consulta foi cancelada com sucesso.';
      break;
    case 'remarcar':
      actionConfirmation = `\n\n‚úÖ Sua consulta foi remarcada com sucesso para ${actionResult.date} √†s ${actionResult.time}.`;
      break;
    default:
      return gptResponse;
  }
  
  console.log(`[OpenAI Service] Mensagem de confirma√ß√£o: "${actionConfirmation}"`);
  return gptResponse + actionConfirmation;
};

module.exports = {
  processMessageWithGPT,
  analyzeIntent,
  incorporateActionConfirmation
};